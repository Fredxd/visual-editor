"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[442],{445:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return c}});var o=t(5339),i=t(7318),r=(t(9231),t(4852)),a=["components"],l={sidebar_position:1e3},s="Custom Field",d={unversionedId:"Fields/CustomField",id:"Fields/CustomField",title:"Custom Field",description:"You can create custom field. You'll need to create a function that returns an object.",source:"@site/docs/Fields/CustomField.md",sourceDirName:"Fields",slug:"/Fields/CustomField",permalink:"/visual-editor/docs/Fields/CustomField",editUrl:"https://github.com/boxraiser/visual-editor/tree/main/docs/docs/Fields/CustomField.md",tags:[],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3},sidebar:"tutorialSidebar",previous:{title:"TextAlign",permalink:"/visual-editor/docs/Fields/TextAlign"},next:{title:"Row",permalink:"/visual-editor/docs/Fields/Layout/Row"}},u=[],p={toc:u};function c(e){var n=e.components,t=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-field"},"Custom Field"),(0,r.kt)("p",null,"You can create custom field. You'll need to create a function that returns an object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type SingleFieldDefinition<O, V> = {\n  // Name of the field\n  name: string, \n  // Options will be passed when rendering the component\n  options: O, \n  // Function to render the component in the editor\n  render: FunctionComponent<{value: V, onChange: (v: V) => void, options: O}>,\n  // Allow conditional rendering depending of the component data\n  shouldRender: (data: Record<string, unknown>) => boolean,\n  // You can compute extra props using the component data\n  extraProps?: (data: Record<string, unknown>) => Record<string, any>,\n}\n")),(0,r.kt)("p",null,"For instance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Field, React } from '@boxraiser/visual-editor'\n\nconst Component = ({\n  value,\n  onChange,\n  options,\n}) => {\n  return (\n    <Field label={options.label} help={options.help}>\n      <TiptapEditor\n        value={value}\n        onChange={onChange}\n        multiline={options.multiline}\n      />\n    </Field>\n  )\n}\n\nexport const MyCustomField = (name, options) => {\n  return {\n    name: name,\n    options: {\n      multiline: true,\n      allowHeadings: false,\n      default: '',\n      ...options,\n    },\n    render: Component,\n    shouldRender: () => true,\n  }\n}\n")),(0,r.kt)("p",null,"For simple fields you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defineField")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"defineFieldGroup")," helper function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Field, defineField, React } from '@boxraiser/visual-editor'\n\nconst Component = ({ value, onChange, options }) => {\n  return <div>\n      <input value={value} onChange={(e) => onChange(e.target.value)} />\n  </div>\n}\n\nexport const Number = defineField({\n  defaultOptions: {\n    default: '',\n  },\n  render: Component,\n})\n")),(0,r.kt)("p",null,"You can check how ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/boxraiser/visual-editor/tree/main/visual-editor/src/fields"},"it is used internally")))}c.isMDXComponent=!0}}]);