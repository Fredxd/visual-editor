"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[348],{4852:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(9231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6279:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=n(5339),a=n(7318),o=(n(9231),n(4852)),i=["components"],c={},l="Laravel",s={unversionedId:"Examples/Laravel",id:"Examples/Laravel",title:"Laravel",description:"Here is a sample code to render the content of the block inside Laravel. Every page component is rendered with a view named after the identifier with passing the data as variables with an additional fields variable containing all the fields.",source:"@site/docs/Examples/Laravel.md",sourceDirName:"Examples",slug:"/Examples/Laravel",permalink:"/visual-editor/docs/Examples/Laravel",editUrl:"https://github.com/boxraiser/visual-editor/tree/main/docs/docs/Examples/Laravel.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tabs",permalink:"/visual-editor/docs/Fields/Layout/Tabs"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"laravel"},"Laravel"),(0,o.kt)("p",null,"Here is a sample code to render the content of the block inside Laravel. Every page component is rendered with a view named after the identifier with passing the data as variables with an additional ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," variable containing all the fields."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"class BlockRenderer\n{\n\n    /* \n    *  Interceptors acts as middlewares\n    *  and can transform the data with\n    *  the inject(string $blocName, array $data) method\n    */ \n    private static $interceptors = [\n        'my-block' => MyBlockInterceptor::class,\n    ];\n\n    public static function render($blocs): string\n    {\n        if (is_string($blocs)) {\n            $blocs = json_decode($blocs, true);\n        }\n        return collect($blocs)->map(function ($bloc) {\n            return self::renderBlock($bloc);\n        })->join('');\n    }\n\n    private static function renderBlock(array $data): string\n    {\n        $request = request();\n        $blocName = $data['_name'];\n        $data['isPreview'] = false;\n        if (isset(self::$interceptors[$blocName])) {\n            $data = app(self::$interceptors[$blocName])->inject($blocName, $data);\n        }\n        if ($request->route()->getName() === 'preview') {\n            $data['isPreview'] = true;\n        }\n        return view(\"front.blocs.{$blocName}\", array_merge(['fields' => $data], $data))->render();\n    }\n    \n}\n")))}d.isMDXComponent=!0}}]);